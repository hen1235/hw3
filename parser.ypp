%{
	#include "attributes.h"
	#include <iostream>
	#include <stdlib.h>

	using namespace std;
	int whileFlag = 0;
	type_t funcType = _NONE;
	extern int yylex();
	extern int yylineno;
	extern char * yytext;
	int yyerror(const char * message);
	void match_operands(type_t type1, type_t type2, bool flag);
	stack<Tuple> tables;
	stack<int> offsets;
	vector<string> args;
	bool check_variable_exist(string name);
	bool check_func_exist(string name, vector<string> argList);
	vector<string> get_args(Var var);
	string types[6] = {"INT","BOOL","STRING","BYTE","VOID","NONE"};
%}



%token ID NUM B STRING TRUE FALSE VOID INT
%nonassoc IFX
%nonassoc ELSE 
%token BOOL BREAK COMMA BYTE IF RETURN SC WHILE ERROR
%right ASSIGN 
%left OR
%left AND
%left EQ NEQ
%nonassoc LT GT LTE GTE
%left ADD SUB
%left DIV MUL
%right NOT
%left LBRACE RBRACE
%left LBRACK RBRACK LPAREN RPAREN 



%%

Program	:	
		{

			/* insert print function to symbol table */
			Tuple print, printi;
			print.parent = NULL;
			vector<string> printArgs;
			printArgs.push_back("STRING");
			BaseRecord* printRecord = new FuncRecord("print",_VOID,printArgs);
			print.table.push_back(*printRecord);
			tables.push(print);
			offsets.push(0);

			/* insert printi function to symbol table */
			printi.parent = &(tables.top());
			vector<string> printiArgs;
			printiArgs.push_back("INT");
			BaseRecord* printiRecord = new FuncRecord("printi",_VOID,printiArgs);
			printi.table.push_back(*printiRecord);
			tables.push(printi);
			offsets.push(0);

			Tuple tuple;
			tuple.parent = &(tables.top());
			tables.push(tuple);
			offsets.push(0);



		} Funcs 
		{				
			tables.pop();
			offsets.pop();
			tables.pop();
			offsets.pop();
			tables.pop();
			offsets.pop();
		}
		;

Funcs	: /* epsilon */
		| FuncDecl Funcs
		;

FuncDecl	:  RetType 
			{ 
				funcType = $1.type; 
			} 
				ID { $3.name = yytext; } 
			{ 					
				if(check_variable_exist($3.name)){
					errorDef(yylineno, $3.name);
					exit(0);
				}
				$3.type = $1.type;	

			} LPAREN Formals RPAREN LBRACE OPENSCOPE 
			{
				BaseRecord* funcRecord = new FuncRecord($3.name, $1.type, args);
				args.clear();
				//cout << $3.name << " " << $1.type << " " << dynamic_cast<FuncRecord*>(funcRecord)->args[0] << endl;
				tables.top().table.push_back(*funcRecord);
				Tuple tuple;
				tuple.parent = &(tables.top());
				tables.push(tuple);
			} Statments 
				{ funcType = _NONE; } CLOSESCOPE RBRACE
			;


RetType	: Type { $$.type = $1.type;}
		| VOID { $$.type = _VOID; }
		;

Formals	: /* epsilon */
		| FormalsList
		;

FormalsList	: FormalDecl
			| FormalDecl COMMA FormalsList
			;

FormalDecl	: Type ID
			{ 
				args.push_back(types[$1.type]); 
				tables.top().table.push_back(Record($2.name,$1.type,offsets.top()-1)); 

			}
			| Type ID LBRACK NUM RBRACK 
			{ 
				args.push_back(types[$2.type]);
				tables.top().table.push_back(Record($2.name,$2.type,offsets.top()-1)); 
			}
			| Type ID LBRACK NUM B RBRACK 
			{ 
				args.push_back(types[$2.type]);
				tables.top().table.push_back(Record($2.name,$2.type,offsets.top()-1)); 

			}
			;

Statments	: Statement
			| Statments Statement
			;

Statement 	: LBRACE OPENSCOPE Statments CLOSESCOPE RBRACE
			| Type ID SC
			{ 
				if(check_variable_exist($2.name)){
					errorDef(yylineno, $2.name);
					exit(0);
				}
				$2.type = $1.type;
				$2.size = -1;
				Record record($2.name, $1.type, offsets.top());
				tables.top().table.push_back(record);
				offsets.top()++;

			}
			| Type ID ASSIGN Exp SC
			{ 
				if(check_variable_exist($2.name)){
					errorUndef(yylineno, $2.name);
					exit(0);
				}
				$2.type = $1.type;
				$2.size = -1;
				Record record($2.name, $1.type, offsets.top());
				tables.top().table.push_back(record);
				offsets.top()++;
			}
			| Type ID LBRACK NUM RBRACK SC
			{ 
				if(check_variable_exist($2.name)){
					errorDef(yylineno, $2.name);
					exit(0);
				}
				$2.type = $1.type;
				$2.size = $4.size;
				ArrRecord record($2.name, $1.type, offsets.top(), $4.size);
				tables.top().table.push_back(record);
				offsets.top()++;
			}
			| Type ID LBRACK NUM B RBRACK SC
			{ 
				if(check_variable_exist($2.name)){
					errorDef(yylineno, $2.name);
					exit(0);
				}
				$2.type = $1.type;
				$2.size = $4.size;
				ArrRecord record($2.name, $1.type, offsets.top(), $4.size);
				tables.top().table.push_back(record);
				offsets.top()++;
			}
			| ID ASSIGN Exp SC 
			{
			 
				if(!check_variable_exist($1.name)){
					errorUndef(yylineno, $1.name);
					exit(0);
				}
			
				else if($1.type == _INT && ($3.type != _INT && $3.type != _BYTE )){
					errorMismatch(yylineno); 
					exit(0); 
				}
				else if($1.type == _BYTE && $3.type != _BYTE){
					errorMismatch(yylineno); 
					exit(0); 
				}
				else if($1.type == _BOOL && $3.type !=_BOOL){
					errorMismatch(yylineno); 
					exit(0); 
				}
				else if($1.type == _STRING && $3.type !=_STRING){
					errorMismatch(yylineno); 
					exit(0); 
				}
			}
			| ID LBRACK Exp RBRACK ASSIGN Exp SC
			{
				if(!check_variable_exist($1.name)){
					errorUndef(yylineno, $1.name);
					exit(0);
				}
				else if($3.type != _INT && $3.type != _BYTE){
					errorMismatch(yylineno); 
					exit(0); 
				}
				else if($1.type == _INT && ($6.type != _INT && $6.type != _BYTE )){
					errorMismatch(yylineno); 
					exit(0); 
				}
				else if($1.type == _BYTE && $6.type != _BYTE){
					errorMismatch(yylineno); 
					exit(0); 
				}
				else if($1.type == _BOOL && $6.type !=_BOOL){
					errorMismatch(yylineno); 
					exit(0); 
				}
				else if($1.type == _STRING && $6.type !=_STRING){
					errorMismatch(yylineno); 
					exit(0); 
				}

			}
			| Call SC
			| RETURN SC { if(funcType != _VOID){ 
							errorMismatch(yylineno); 
							exit(0); 
							}
						}
			| RETURN Exp SC { if(funcType != $2.type){ 
								errorMismatch(yylineno); 
								exit(0); 
								}
							}
			| IF LPAREN Exp RPAREN OPENSCOPE Statement CLOSESCOPE %prec IFX
			| IF LPAREN Exp RPAREN OPENSCOPE Statement CLOSESCOPE ELSE OPENSCOPE Statement CLOSESCOPE
			| WHILE LPAREN Exp RPAREN 
				{ whileFlag = 1; } OPENSCOPE Statement CLOSESCOPE { whileFlag = 0; }
			| BREAK SC { if(!whileFlag){ 
							errorUnexpectedBreak(yylineno); 
							exit(0);
							}
						}
			;

Call	: ID LPAREN ExpList RPAREN
 		{
 			vector<string> argList = get_args($3);
			if(!check_func_exist($1.name, argList)){
				errorUndef(yylineno, $1.name);
				exit(0);
			}
			$$.type = $1.type;

		}
		| ID LPAREN RPAREN 
		{
			if(!check_func_exist($1.name, vector<string>())){
				errorUndef(yylineno, $1.name);
				exit(0);
			}
			$$.type = $1.type;

		}
		;

ExpList	: Exp
		| Exp COMMA ExpList
		;

Type 	: INT { $$.type = _INT; }
		| BYTE { $$.type = _BYTE; }
		| BOOL { $$.type = _BOOL; }
		;

Exp 	: LPAREN Exp RPAREN { $$ = $2; }
		| ID LBRACK Exp RBRACK	
		{ 
			if($3.type != _BYTE || $3.type != _INT){
				errorMismatch(yylineno);
				exit(0);
				}
		} 
		| Exp SUB Exp { match_operands($1.type,$3.type,true); $$.type = _INT; }
		| Exp ADD Exp { match_operands($1.type,$3.type,true); $$.type = _INT; }
		| Exp MUL Exp { match_operands($1.type,$3.type,true); $$.type = _INT; }
		| Exp DIV Exp { match_operands($1.type,$3.type,true); $$.type = _INT; }
		| ID 
		{ 
			if(!check_variable_exist($1.name)){
				errorUndef(yylineno, $1.name);
				exit(0);
			}
			$$ = $1; 
		}
		| Call { $$ = $1; }
		| NUM { $$.type = _INT; }
		| NUM B { $$.type = _BYTE; }
		| STRING  { $$.type = _STRING; }
		| TRUE { $$.type = _BOOL;}
		| FALSE { $$.type = _BOOL; }
		| NOT Exp { if($2.type != _BOOL){
						errorMismatch(yylineno);
						exit(0);
						} 
					$$.type = _BOOL;
				}
		| Exp AND Exp { match_operands($1.type,$2.type,false); $$.type = _BOOL; }
		| Exp OR Exp { match_operands($1.type,$2.type,false); $$.type = _BOOL; }
		| Exp EQ Exp { match_operands($1.type,$2.type,true); $$.type = _BOOL; }
		| Exp NEQ Exp { match_operands($1.type,$2.type,true); $$.type = _BOOL; }
		| Exp LT Exp { match_operands($1.type,$2.type,true); $$.type = _BOOL; }
		| Exp GT Exp { match_operands($1.type,$2.type,true); $$.type = _BOOL; }
		| Exp LTE Exp { match_operands($1.type,$2.type,true); $$.type = _BOOL; }
		| Exp GTE Exp { match_operands($1.type,$2.type,true); $$.type = _BOOL; }
		;

OPENSCOPE	: {
				Tuple tuple;
				tuple.parent = &(tables.top());
				tables.push(tuple);
				offsets.push(offsets.top());
			}
			;

CLOSESCOPE	: {
				endScope();
				Tuple* tuple = &(tables.top());
				vector<BaseRecord>* table = &(tuple->table);
				Record* record;
				ArrRecord* arrRecord;
				FuncRecord* funcRecord;
				for(vector<BaseRecord>::iterator it = table->begin(); it != table->end(); ++it){
					arrRecord = dynamic_cast<ArrRecord*>(&(*it));
					if(arrRecord != NULL){ // record of array
						printID(arrRecord->name,arrRecord->offset,makeArrayType(types[arrRecord->type],arrRecord->size));
					}
					record = dynamic_cast<Record*>(&(*it));
					if(record != NULL){ // record of variable
						printID(record->name, record->offset, types[record->type]);
					}
					funcRecord = dynamic_cast<FuncRecord*>(&(*it));
					if(funcRecord == NULL){ // record of function
						printID(funcRecord->name, 0, makeFunctionType(types[funcRecord->type],funcRecord->args));
					}
				}
				tables.pop();
				offsets.pop();
			}
			;
%%

int main()
{
	yyparse();
}

int yyerror(const char * message)
{
	cout<<"Parse error: "<<message<<endl;
	exit(0);
}

/* flag == true checks for numeric types, type == false checks for bool value */
void match_operands(type_t type1, type_t type2, bool flag){
	if (flag == true){
		if((type1 != _INT && type1 != _BYTE) || (type2 != _INT && type2 != _BYTE)){
			errorMismatch(yylineno);
			exit(0);
		}
	}
	else if (flag == false){
		if((type1 != _BOOL) || (type2 != _BOOL)){
			errorMismatch(yylineno);
			exit(0);
		}
	}
}

/* return true if varialbe was declared, false if not */
bool check_variable_exist(string name){
	Tuple *tuple = &(tables.top());
	vector<BaseRecord>* table;
	while(tuple != NULL){
		table = &(tuple->table);
		for(vector<BaseRecord>::iterator it = table->begin(); it != table->end(); ++it){
			if(it->name == name){
				return true;
			}
		}
		tuple = tuple->parent;
	}
	return false;
}

bool check_func_exist(string name, vector<string> argList){
	cout << name << "\n" << endl;
	Tuple *tuple = &(tables.top());
	vector<BaseRecord>* table;
	BaseRecord* baseRecord;
	FuncRecord* funcRecord;
	while(tuple != NULL){
		table = &(tuple->table);

		for(vector<BaseRecord>::iterator it = table->begin(); it != table->end(); ++it){
			funcRecord = dynamic_cast<FuncRecord*>(&(*it));
			if(funcRecord == NULL){
				continue;
			}
			cout << it->name << "\n" << endl;
			if(it->name == name && argList == funcRecord->args){
				return true;
			}
		}
		tuple = tuple->parent;
	}
	return false;
}

/*type_t get_type(type_t var){



	return _VOID;
}*/

vector<string> get_args(Var var){
	vector<string> argList;
	




	return argList;
}
